{"version":3,"file":"index.js","sources":["source/indexed.js","source/extended.js"],"sourcesContent":["import { getClass } from '@actualwave/get-class';\nimport { getTypeValue } from '@actualwave/primitive-type-checker';\nimport { getTypeCheckerData } from '@actualwave/type-checkers';\n\nconst indexBasedClasses = new Set([Array]);\n\nexport const INDEX = '(Index)';\n\nexport const isIndexAccessTarget = (target) => !!target && indexBasedClasses.has(getClass(target));\n\nexport const registerIndexBasedClass = (constructor) => {\n  indexBasedClasses.add(constructor);\n};\n\nexport const setIndexValueType = (target, type) => {\n  const storage = getTypeCheckerData(target);\n\n  if (storage && type) {\n    storage.set(INDEX, new Set([type]));\n  }\n};\n\nexport const setIndexValueTypeBy = (target, value) => {\n  setIndexValueType(target, getTypeValue(value));\n};\n","import { createTypesStorage } from '@actualwave/type-checker-levels-storage';\r\nimport isFunction from '@actualwave/is-function';\r\n\r\nimport PrimitiveTypeChecker, {\r\n  GET_PROPERTY,\r\n  SET_PROPERTY,\r\n} from '@actualwave/primitive-type-checker';\r\n\r\nimport { INDEX, isIndexAccessTarget } from './indexed';\r\n\r\nclass ExtendedTypeChecker extends PrimitiveTypeChecker {\r\n  constructor({\r\n    collectTypesOnInit = true,\r\n    enableGetChecker = true,\r\n    areArrayElementsOfSameType = true,\r\n    customGetTypeValue = undefined,\r\n  } = {}) {\r\n    super(collectTypesOnInit, enableGetChecker);\r\n\r\n    this.areArrayElementsOfSameType = areArrayElementsOfSameType;\r\n    this.customGetTypeValue = customGetTypeValue;\r\n    if (this.customGetTypeValue !== undefined && !isFunction(this.customGetTypeValue)) {\r\n      throw new Error('\"customGetTypeValue\" must be a callable object, i.e. function.');\r\n    }\r\n  }\r\n\r\n  getTypeValue(value) {\r\n    if (this.customGetTypeValue) {\r\n      return this.customGetTypeValue(value);\r\n    }\r\n\r\n    return super.getTypeValue(value);\r\n  }\r\n\r\n  findIndexedType(target) {\r\n    const { length } = target;\r\n\r\n    for (let index = 0; index < length; index += 1) {\r\n      const type = this.getTypeValue(target[index]);\r\n\r\n      if (type) {\r\n        return type;\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  init(target, cachedStorage = null) {\r\n    if (\r\n      !cachedStorage &&\r\n      this.collectTypesOnInit &&\r\n      this.areArrayElementsOfSameType &&\r\n      isIndexAccessTarget(target)\r\n    ) {\r\n      const storage = createTypesStorage();\r\n      const type = this.findIndexedType(target);\r\n\r\n      if (type) {\r\n        storage.add(INDEX, type);\r\n        return storage;\r\n      }\r\n    }\r\n\r\n    return super.init(target, cachedStorage);\r\n  }\r\n\r\n  getProperty(target, names, value, storage) {\r\n    if (this.areArrayElementsOfSameType && isIndexAccessTarget(target)) {\r\n      return this.getIndexProperty(target, names, value, storage);\r\n    }\r\n\r\n    return this.getNamedProperty(target, names, value, storage);\r\n  }\r\n\r\n  getIndexProperty(target, names, value, storage) {\r\n    return this.checkType(\r\n      GET_PROPERTY,\r\n      target,\r\n      names.clone(INDEX),\r\n      this.getTypeValue(value),\r\n      storage,\r\n    );\r\n  }\r\n\r\n  getNamedProperty(target, names, value, storage) {\r\n    return super.getProperty(target, names, value, storage);\r\n  }\r\n\r\n  setProperty(target, names, newValue, storage) {\r\n    if (this.areArrayElementsOfSameType && isIndexAccessTarget(target)) {\r\n      return this.setIndexProperty(target, names, newValue, storage);\r\n    }\r\n\r\n    return this.setNamedProperty(target, names, newValue, storage);\r\n  }\r\n\r\n  setIndexProperty(target, names, newValue, storage) {\r\n    const type = this.getTypeValue(newValue);\r\n\r\n    return this.checkType(SET_PROPERTY, target, names, type, storage);\r\n  }\r\n\r\n  setNamedProperty = (target, names, newValue, storage) => {\r\n    return super.setProperty(target, names, newValue, storage);\r\n  };\r\n}\r\n\r\nexport const createExtendedTypeChecker = (\r\n  collectTypesOnInit = true,\r\n  enableGetChecker = true,\r\n  areArrayElementsOfSameType = true,\r\n) => new ExtendedTypeChecker(collectTypesOnInit, enableGetChecker, areArrayElementsOfSameType);\r\n\r\nexport default ExtendedTypeChecker;\r\n"],"names":["indexBasedClasses","Set","Array","INDEX","isIndexAccessTarget","target","has","getClass","registerIndexBasedClass","constructor","add","setIndexValueType","type","storage","getTypeCheckerData","set","setIndexValueTypeBy","value","getTypeValue","ExtendedTypeChecker","PrimitiveTypeChecker","collectTypesOnInit","enableGetChecker","areArrayElementsOfSameType","customGetTypeValue","undefined","setNamedProperty","names","newValue","setProperty","isFunction","Error","findIndexedType","length","index","init","cachedStorage","createTypesStorage","getProperty","getIndexProperty","getNamedProperty","checkType","GET_PROPERTY","clone","setIndexProperty","SET_PROPERTY","createExtendedTypeChecker"],"mappings":";;;;;;;;;;;;;AAIA,MAAMA,iBAAiB,GAAG,IAAIC,GAAJ,CAAQ,CAACC,KAAD,CAAR,CAA1B;AAEA,MAAaC,KAAK,GAAG,SAAd;AAEP,MAAaC,mBAAmB,GAAIC,MAAD,IAAY,CAAC,CAACA,MAAF,IAAYL,iBAAiB,CAACM,GAAlB,CAAsBC,iBAAQ,CAACF,MAAD,CAA9B,CAApD;AAEP,MAAaG,uBAAuB,GAAIC,WAAD,IAAiB;EACtDT,iBAAiB,CAACU,GAAlB,CAAsBD,WAAtB;CADK;AAIP,MAAaE,iBAAiB,GAAG,CAACN,MAAD,EAASO,IAAT,KAAkB;QAC3CC,OAAO,GAAGC,+BAAkB,CAACT,MAAD,CAAlC;;MAEIQ,OAAO,IAAID,IAAf,EAAqB;IACnBC,OAAO,CAACE,GAAR,CAAYZ,KAAZ,EAAmB,IAAIF,GAAJ,CAAQ,CAACW,IAAD,CAAR,CAAnB;;CAJG;AAQP,MAAaI,mBAAmB,GAAG,CAACX,MAAD,EAASY,KAAT,KAAmB;EACpDN,iBAAiB,CAACN,MAAD,EAASa,iCAAY,CAACD,KAAD,CAArB,CAAjB;CADK;;ACZP,MAAME,mBAAN,SAAkCC,6BAAlC,CAAuD;EACrDX,WAAW,CAAC;IACVY,kBAAkB,GAAG,IADX;IAEVC,gBAAgB,GAAG,IAFT;IAGVC,0BAA0B,GAAG,IAHnB;IAIVC,kBAAkB,GAAGC;MACnB,EALO,EAKH;UACAJ,kBAAN,EAA0BC,gBAA1B;;SAsFFI,gBAvFQ,GAuFW,CAACrB,MAAD,EAASsB,KAAT,EAAgBC,QAAhB,EAA0Bf,OAA1B,KAAsC;aAChD,MAAMgB,WAAN,CAAkBxB,MAAlB,EAA0BsB,KAA1B,EAAiCC,QAAjC,EAA2Cf,OAA3C,CAAP;KAxFM;;SAGDU,0BAAL,GAAkCA,0BAAlC;SACKC,kBAAL,GAA0BA,kBAA1B;;QACI,KAAKA,kBAAL,KAA4BC,SAA5B,IAAyC,CAACK,UAAU,CAAC,KAAKN,kBAAN,CAAxD,EAAmF;YAC3E,IAAIO,KAAJ,CAAU,gEAAV,CAAN;;;;EAIJb,YAAY,CAACD,KAAD,EAAQ;QACd,KAAKO,kBAAT,EAA6B;aACpB,KAAKA,kBAAL,CAAwBP,KAAxB,CAAP;;;WAGK,MAAMC,YAAN,CAAmBD,KAAnB,CAAP;;;EAGFe,eAAe,CAAC3B,MAAD,EAAS;UAChB;MAAE4B;QAAW5B,MAAnB;;SAEK,IAAI6B,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,MAA5B,EAAoCC,KAAK,IAAI,CAA7C,EAAgD;YACxCtB,IAAI,GAAG,KAAKM,YAAL,CAAkBb,MAAM,CAAC6B,KAAD,CAAxB,CAAb;;UAEItB,IAAJ,EAAU;eACDA,IAAP;;;;WAIG,EAAP;;;EAGFuB,IAAI,CAAC9B,MAAD,EAAS+B,aAAa,GAAG,IAAzB,EAA+B;QAE/B,CAACA,aAAD,IACA,KAAKf,kBADL,IAEA,KAAKE,0BAFL,IAGAnB,mBAAmB,CAACC,MAAD,CAJrB,EAKE;YACMQ,OAAO,GAAGwB,2CAAkB,EAAlC;YACMzB,IAAI,GAAG,KAAKoB,eAAL,CAAqB3B,MAArB,CAAb;;UAEIO,IAAJ,EAAU;QACRC,OAAO,CAACH,GAAR,CAAYP,KAAZ,EAAmBS,IAAnB;eACOC,OAAP;;;;WAIG,MAAMsB,IAAN,CAAW9B,MAAX,EAAmB+B,aAAnB,CAAP;;;EAGFE,WAAW,CAACjC,MAAD,EAASsB,KAAT,EAAgBV,KAAhB,EAAuBJ,OAAvB,EAAgC;QACrC,KAAKU,0BAAL,IAAmCnB,mBAAmB,CAACC,MAAD,CAA1D,EAAoE;aAC3D,KAAKkC,gBAAL,CAAsBlC,MAAtB,EAA8BsB,KAA9B,EAAqCV,KAArC,EAA4CJ,OAA5C,CAAP;;;WAGK,KAAK2B,gBAAL,CAAsBnC,MAAtB,EAA8BsB,KAA9B,EAAqCV,KAArC,EAA4CJ,OAA5C,CAAP;;;EAGF0B,gBAAgB,CAAClC,MAAD,EAASsB,KAAT,EAAgBV,KAAhB,EAAuBJ,OAAvB,EAAgC;WACvC,KAAK4B,SAAL,CACLC,iCADK,EAELrC,MAFK,EAGLsB,KAAK,CAACgB,KAAN,CAAYxC,KAAZ,CAHK,EAIL,KAAKe,YAAL,CAAkBD,KAAlB,CAJK,EAKLJ,OALK,CAAP;;;EASF2B,gBAAgB,CAACnC,MAAD,EAASsB,KAAT,EAAgBV,KAAhB,EAAuBJ,OAAvB,EAAgC;WACvC,MAAMyB,WAAN,CAAkBjC,MAAlB,EAA0BsB,KAA1B,EAAiCV,KAAjC,EAAwCJ,OAAxC,CAAP;;;EAGFgB,WAAW,CAACxB,MAAD,EAASsB,KAAT,EAAgBC,QAAhB,EAA0Bf,OAA1B,EAAmC;QACxC,KAAKU,0BAAL,IAAmCnB,mBAAmB,CAACC,MAAD,CAA1D,EAAoE;aAC3D,KAAKuC,gBAAL,CAAsBvC,MAAtB,EAA8BsB,KAA9B,EAAqCC,QAArC,EAA+Cf,OAA/C,CAAP;;;WAGK,KAAKa,gBAAL,CAAsBrB,MAAtB,EAA8BsB,KAA9B,EAAqCC,QAArC,EAA+Cf,OAA/C,CAAP;;;EAGF+B,gBAAgB,CAACvC,MAAD,EAASsB,KAAT,EAAgBC,QAAhB,EAA0Bf,OAA1B,EAAmC;UAC3CD,IAAI,GAAG,KAAKM,YAAL,CAAkBU,QAAlB,CAAb;WAEO,KAAKa,SAAL,CAAeI,iCAAf,EAA6BxC,MAA7B,EAAqCsB,KAArC,EAA4Cf,IAA5C,EAAkDC,OAAlD,CAAP;;;;;AAQJ,MAAaiC,yBAAyB,GAAG,CACvCzB,kBAAkB,GAAG,IADkB,EAEvCC,gBAAgB,GAAG,IAFoB,EAGvCC,0BAA0B,GAAG,IAHU,KAIpC,IAAIJ,mBAAJ,CAAwBE,kBAAxB,EAA4CC,gBAA5C,EAA8DC,0BAA9D,CAJE;;;;;;;;;;;;;;;;;;;;;;;;;"}