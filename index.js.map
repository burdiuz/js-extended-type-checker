{"version":3,"file":"index.js","sources":["source/indexed.js","source/extended.js"],"sourcesContent":["import { getClass } from '@actualwave/get-class';\nimport { getTypeValue } from '@actualwave/primitive-type-checker';\nimport { getTypeCheckerData } from '@actualwave/type-checkers';\n\nconst indexBasedClasses = new Set([Array]);\n\nexport const INDEX = '(Index)';\n\nexport const isIndexAccessTarget = (target) => !!target && indexBasedClasses.has(getClass(target));\n\nexport const registerIndexBasedClass = (constructor) => {\n  indexBasedClasses.add(constructor);\n};\n\nexport const setIndexValueType = (target, type) => {\n  const storage = getTypeCheckerData(target);\n\n  if (storage && type) {\n    storage.set(INDEX, new Set([type]));\n  }\n};\n\nexport const setIndexValueTypeBy = (target, value) => {\n  setIndexValueType(target, getTypeValue(value));\n};\n","import { createTypesStorage } from '@actualwave/type-checker-levels-storage';\r\nimport isFunction from '@actualwave/is-function';\r\n\r\nimport PrimitiveTypeChecker, {\r\n  GET_PROPERTY,\r\n  SET_PROPERTY,\r\n} from '@actualwave/primitive-type-checker';\r\n\r\nimport { INDEX, isIndexAccessTarget } from './indexed';\r\n\r\nconst isOptionalFunction = (value, name) => {\r\n  if (value !== undefined && !isFunction(value)) {\r\n    throw new Error(`\"${name}\" must be a callable object, i.e. function.`);\r\n  }\r\n};\r\n\r\nclass ExtendedTypeChecker extends PrimitiveTypeChecker {\r\n  constructor({\r\n    collectTypesOnInit = true,\r\n    enableGetChecker = true,\r\n    areArrayElementsOfSameType = true,\r\n    customTypeResolver = undefined,\r\n    customTypeComparator = undefined,\r\n  } = {}) {\r\n    super(collectTypesOnInit, enableGetChecker);\r\n\r\n    this.areArrayElementsOfSameType = areArrayElementsOfSameType;\r\n\r\n    this.customTypeResolver = customTypeResolver;\r\n    isOptionalFunction(this.customTypeResolver, 'customTypeResolver');\r\n\r\n    this.customTypeComparator = customTypeComparator;\r\n    isOptionalFunction(this.customTypeComparator, 'customTypeComparator');\r\n  }\r\n\r\n  getTypeValue(value) {\r\n    if (this.customTypeResolver) {\r\n      return this.customTypeResolver(value);\r\n    }\r\n\r\n    return super.getTypeValue(value);\r\n  }\r\n\r\n  isTypeCompatible(storage, key, type, target) {\r\n    if (this.customTypeComparator) {\r\n      return this.customTypeComparator((storage, key, type, target));\r\n    }\r\n\r\n    return super.isTypeCompatible(storage, key, type, target);\r\n  }\r\n\r\n  findIndexedType(target) {\r\n    const { length } = target;\r\n\r\n    for (let index = 0; index < length; index += 1) {\r\n      const type = this.getTypeValue(target[index]);\r\n\r\n      if (type) {\r\n        return type;\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  init(target, cachedStorage = null) {\r\n    if (\r\n      !cachedStorage &&\r\n      this.collectTypesOnInit &&\r\n      this.areArrayElementsOfSameType &&\r\n      isIndexAccessTarget(target)\r\n    ) {\r\n      const storage = createTypesStorage();\r\n      const type = this.findIndexedType(target);\r\n\r\n      if (type) {\r\n        storage.add(INDEX, type);\r\n        return storage;\r\n      }\r\n    }\r\n\r\n    return super.init(target, cachedStorage);\r\n  }\r\n\r\n  getProperty(target, names, value, storage) {\r\n    if (this.areArrayElementsOfSameType && isIndexAccessTarget(target)) {\r\n      return this.getIndexProperty(target, names, value, storage);\r\n    }\r\n\r\n    return super.getProperty(target, names, value, storage);\r\n  }\r\n\r\n  getIndexProperty(target, names, value, storage) {\r\n    return this.checkType(GET_PROPERTY, storage, target, names, this.getTypeValue(value));\r\n  }\r\n\r\n  setProperty(target, names, newValue, storage) {\r\n    if (this.areArrayElementsOfSameType && isIndexAccessTarget(target)) {\r\n      return this.setIndexProperty(target, names, newValue, storage);\r\n    }\r\n\r\n    return super.setProperty(target, names, newValue, storage);\r\n  }\r\n\r\n  setIndexProperty(target, names, newValue, storage) {\r\n    return this.checkType(SET_PROPERTY, storage, target, names, this.getTypeValue(newValue));\r\n  }\r\n}\r\n\r\nexport const createExtendedTypeChecker = (options) => new ExtendedTypeChecker(options);\r\n\r\nexport default ExtendedTypeChecker;\r\n"],"names":["indexBasedClasses","Set","Array","INDEX","isIndexAccessTarget","target","has","getClass","registerIndexBasedClass","constructor","add","setIndexValueType","type","storage","getTypeCheckerData","set","setIndexValueTypeBy","value","getTypeValue","isOptionalFunction","name","undefined","isFunction","Error","ExtendedTypeChecker","PrimitiveTypeChecker","collectTypesOnInit","enableGetChecker","areArrayElementsOfSameType","customTypeResolver","customTypeComparator","isTypeCompatible","key","findIndexedType","length","index","init","cachedStorage","createTypesStorage","getProperty","names","getIndexProperty","checkType","GET_PROPERTY","setProperty","newValue","setIndexProperty","SET_PROPERTY","createExtendedTypeChecker","options"],"mappings":"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"}