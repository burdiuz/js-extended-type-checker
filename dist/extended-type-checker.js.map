{"version":3,"file":"extended-type-checker.js","sources":["../source/indexed.js","../source/replace.js","../source/index.js"],"sourcesContent":["import {\n  getTargetTypeChecker,\n  getTargetTypeCheckerConfig,\n} from '@actualwave/type-checkers';\n\nconst indexBasedClasses = [Array];\n\nexport const INDEX = '(Index)';\n\nexport const isIndexAccessTarget = (target) =>\n  target && indexBasedClasses.indexOf(target.constructor) >= 0;\n\nexport const registerIndexBasedClass = (constructor) => {\n  indexBasedClasses.push(constructor);\n};\n\nexport const setIndexValueType = (target, type) => {\n  const config = getTargetTypeCheckerConfig(target);\n\n  if (config) {\n    config.types[INDEX] = type || '';\n  }\n};\n\nexport const setIndexValueTypeBy = (target, value) => {\n  setIndexValueType(target, getTargetTypeChecker(target).getTypeString(value));\n};\n","import { ARGUMENTS, RETURN_VALUE } from '@actualwave/primitive-type-checker';\n\nimport { getTargetTypeCheckerConfig } from '@actualwave/type-checkers';\n\nimport { INDEX } from './indexed';\n\nexport const replacePropertyTypeCheck = (target, name, fn) => {\n  const { types } = getTargetTypeCheckerConfig(target);\n  delete types[name];\n\n  if (fn) {\n    types[name] = fn;\n  }\n};\n\nexport const replaceArgumentsTypeCheck = (target, fn) => {\n  const { types } = getTargetTypeCheckerConfig(target);\n  delete types[ARGUMENTS];\n\n  if (fn) {\n    types[ARGUMENTS] = fn;\n  }\n};\n\nexport const replaceReturnValueTypeCheck = (target, fn) => {\n  const { types } = getTargetTypeCheckerConfig(target);\n  delete types[RETURN_VALUE];\n\n  if (fn) {\n    types[RETURN_VALUE] = fn;\n  }\n};\n\nexport const replaceIndexedTypeCheck = (target, fn) => {\n  const { types } = getTargetTypeCheckerConfig(target);\n  delete types[INDEX];\n\n  if (fn) {\n    types[INDEX] = fn;\n  }\n};\n","import PrimitiveTypeChecker, {\n  ARGUMENTS,\n  GET_PROPERTY,\n  RETURN_VALUE,\n  SET_PROPERTY,\n  AsIs,\n  checkPrimitiveType,\n} from '@actualwave/primitive-type-checker';\n\nimport {\n  INDEX,\n  isIndexAccessTarget,\n  registerIndexBasedClass,\n  setIndexValueType,\n  setIndexValueTypeBy,\n} from './indexed';\n\nimport {\n  replaceArgumentsTypeCheck,\n  replaceIndexedTypeCheck,\n  replacePropertyTypeCheck,\n  replaceReturnValueTypeCheck,\n} from './replace';\n\nclass ExtendedTypeChecker extends PrimitiveTypeChecker {\n  areArrayElementsOfSameType = true;\n  replacePropertyTypeCheck = replacePropertyTypeCheck;\n  replaceArgumentsTypeCheck = replaceArgumentsTypeCheck;\n  replaceReturnValueTypeCheck = replaceReturnValueTypeCheck;\n  replaceIndexedTypeCheck = replaceIndexedTypeCheck;\n  isIndexAccessTarget = isIndexAccessTarget;\n  registerIndexBasedClass = registerIndexBasedClass;\n  setIndexValueType = setIndexValueType;\n  setIndexValueTypeBy = setIndexValueTypeBy;\n\n  init(target, errorReporter, cachedTypes = null) {\n    const types = {};\n\n    if (\n      !cachedTypes &&\n      this.collectTypesOnInit &&\n      this.areArrayElementsOfSameType &&\n      isIndexAccessTarget(target)\n    ) {\n      const { length } = target;\n\n      for (let index = 0; index < length; index += 1) {\n        const type = this.getTypeString(target[index]);\n\n        if (type) {\n          types[INDEX] = type;\n          break;\n        }\n      }\n    } else {\n      return super.init(target, errorReporter, cachedTypes);\n    }\n\n    return {\n      types,\n      errorReporter,\n    };\n  }\n\n  getProperty(target, name, value, config, sequence) {\n    if (this.areArrayElementsOfSameType && isIndexAccessTarget(target)) {\n      return this.getIndexProperty(target, INDEX, value, config, sequence);\n    }\n\n    return this.getNamedProperty(target, name, value, config, sequence);\n  }\n\n  getIndexProperty(target, name, value, config, sequence) {\n    const { types, errorReporter } = config;\n    const typeFn = types[name];\n\n    if (typeFn instanceof Function) {\n      return typeFn(GET_PROPERTY, target, name, value, config, sequence);\n    }\n\n    const type = this.getTypeString(value);\n\n    return checkPrimitiveType(\n      GET_PROPERTY,\n      types,\n      AsIs(INDEX),\n      type,\n      errorReporter,\n      sequence,\n    );\n  }\n\n  getNamedProperty(target, name, value, config, sequence) {\n    const typeFn = config.types[name];\n\n    if (typeFn instanceof Function) {\n      return typeFn(GET_PROPERTY, target, name, value, config, sequence);\n    }\n\n    return super.getProperty(target, name, value, config, sequence);\n  }\n\n  setProperty(target, name, newValue, config, sequence) {\n    if (this.areArrayElementsOfSameType && isIndexAccessTarget(target)) {\n      return this.setIndexProperty(target, INDEX, newValue, config, sequence);\n    }\n\n    return this.setNamedProperty(target, name, newValue, config, sequence);\n  }\n\n  setIndexProperty(target, name, newValue, config, sequence) {\n    const { types, errorReporter } = config;\n    const typeFn = types[name];\n\n    if (typeFn instanceof Function) {\n      return typeFn(SET_PROPERTY, target, name, newValue, config, sequence);\n    }\n\n    const type = this.getTypeString(newValue);\n\n    return checkPrimitiveType(\n      SET_PROPERTY,\n      types,\n      AsIs(INDEX),\n      type,\n      errorReporter,\n      sequence,\n    );\n  }\n\n  setNamedProperty(target, name, newValue, config, sequence) {\n    const typeFn = config.types[name];\n\n    if (typeFn instanceof Function) {\n      return typeFn(SET_PROPERTY, target, name, newValue, config, sequence);\n    }\n\n    return super.setProperty(target, name, newValue, config, sequence);\n  }\n\n  arguments(target, thisArg, args, config, sequence) {\n    const typeFn = config.types[ARGUMENTS];\n\n    if (typeFn instanceof Function) {\n      return typeFn(ARGUMENTS, target, args, config, sequence);\n    }\n\n    return super.arguments(target, thisArg, args, config, sequence);\n  }\n\n  returnValue(target, thisArg, value, config, sequence) {\n    const typeFn = config.types[RETURN_VALUE];\n\n    if (typeFn instanceof Function) {\n      return typeFn(RETURN_VALUE, target, value, config, sequence);\n    }\n\n    return super.returnValue(target, thisArg, value, config, sequence);\n  }\n}\n\nexport {\n  isIndexAccessTarget,\n  registerIndexBasedClass,\n  setIndexValueType,\n  setIndexValueTypeBy,\n  replaceArgumentsTypeCheck,\n  replaceIndexedTypeCheck,\n  replacePropertyTypeCheck,\n  replaceReturnValueTypeCheck,\n  ExtendedTypeChecker,\n};\n\nexport default ExtendedTypeChecker;\n"],"names":["indexBasedClasses","Array","INDEX","isIndexAccessTarget","target","indexOf","constructor","registerIndexBasedClass","push","setIndexValueType","type","config","getTargetTypeCheckerConfig","types","setIndexValueTypeBy","value","getTargetTypeChecker","getTypeString","replacePropertyTypeCheck","name","fn","replaceArgumentsTypeCheck","ARGUMENTS","replaceReturnValueTypeCheck","RETURN_VALUE","replaceIndexedTypeCheck","ExtendedTypeChecker","PrimitiveTypeChecker","areArrayElementsOfSameType","errorReporter","cachedTypes","collectTypesOnInit","length","index","init","sequence","getIndexProperty","getNamedProperty","typeFn","Function","GET_PROPERTY","checkPrimitiveType","AsIs","getProperty","newValue","setIndexProperty","setNamedProperty","SET_PROPERTY","setProperty","thisArg","args","arguments","returnValue"],"mappings":"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"}